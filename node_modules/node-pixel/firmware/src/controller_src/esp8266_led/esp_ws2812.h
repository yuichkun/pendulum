/** DEsigned to have the same interface as the LW WS2812 library.
 *
 */


#ifndef ESP_WS2812_H_
#define ESP_WS2812_H_

#define WS2812_DITHER_NUM 1

#include <stdint.h>

#include <Arduino.h>
#include "./esp_ws2812_defs.h"

extern "C"
{
#include "./esp_ws2812_dma.h"
};


class WS2812 {
public:
    WS2812(uint16_t num_led, uint16_t offset);
    WS2812(uint16_t num_led);
    WS2812();
	~WS2812();

	void setOutput(uint8_t pin);
    void set_length(uint16_t num_leds);
    void set_offset(uint16_t offset);

	void sync(uint8_t *px_array, uint8_t pixel_depth);
    void show(uint8_t *pixels);

    uint16_t get_length();

private:
	uint16_t count_led; // how many LEDs being controlled
    uint16_t offset; // any offsets needing to be applied


    void init(uint16_t num_leds);
    void init(uint16_t num_leds, uint16_t offset);
    /** ALL of this will be redefined for ESP8266**/
	void ws2812_sendarray_mask(
            uint8_t *array, uint16_t length,
            uint8_t pinmask,uint8_t *port, uint8_t *portreg
    );

	const volatile uint8_t *ws2812_port;
	volatile uint8_t *ws2812_port_reg;
	uint8_t pinMask;

    uint32_t *i2s_pixels_buffer[WS2812_DITHER_NUM];
    uint32_t i2s_zeros_buffer[NUM_I2S_ZERO_WORDS];
    sdio_queue_t i2s_zeros_queue[WS2812_DITHER_NUM];
    sdio_queue_t i2s_pixels_queue[WS2812_DITHER_NUM];
};

#endif /* ESP_WS2812_H_ */

